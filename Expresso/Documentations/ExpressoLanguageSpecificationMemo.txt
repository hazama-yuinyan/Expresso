Expressoの簡易仕様書
0.デザインメモにもあるとおり、どちらかというと、教育的観点から言語仕様を決定する。
Expressoのポリシーは、Expressive, easy to write。コンセプトは、Easy for beginners, elegant for enthusiasts。
言語哲学は"What the compiler doesn't allow to do is what just you can't"と"Just do as the compiler says"
1.基本的には静的型付けであるが、極力プログラマーが型を明示しなくてもいいようになっている。
値と参照の区別はつけるが、C#レベルのサポートに留める。
2.他の大多数のスクリプト言語同様、関数は第一級オブジェクトであり、関数の引数や戻り値として扱うことができる。
3.Python譲りのcomprehension構文。
4.組み込み型として任意精度演算もサポートする。Fraction型は、ライブラリ提供にする予定。
5.組み込み型の一種であるIntSeq型は、その名の通り整数の数列を表す型で、条件指定のfor文が存在しないExpressoで
C言語におけるfor(int i = 0; i < max; ++i){...}のような処理を実現する他、配列やリストなどPythonにおいてSequenceと呼ばれる
オブジェクトに作用してそのシーケンスオブジェクトの一部または全体をコピーする際に用いられる。(PythonにおけるSliceに相当)
6.変数のスコープは、C++など同様、ブロック文が基本的に持つ。ただし、利便性を考慮してif文やwhile文にも独自の変数スコープを与える。
7.Pythonライクなモジュール機構を持つ。つまり、ソースファイル一つが１モジュールを定義し、モジュール内に別のモジュールが含まれることはない。
8.Expressoにおいて、関数はモジュールに属し、メソッドはクラスに属する。これらのサブルーチンはそれぞれ、selfの値として自分が所属するクラス
のインスタンスを暗黙の第一引数として取る。つまり、関数内でselfはメソッド内ではクラスインスタンスを参照する。
9.プログラムのエントリーポイントとしてmain関数を定義する必要がある。main関数を定義したモジュールはメインモジュールと呼ばれ、そのプログラム内での
トップレベルモジュールとなる。
10.Expressoにおけるグローバル変数とは、自身が定義されているモジュールスコープの変数を指す。つまり、main関数内でのグローバル変数は
mainモジュールの変数を指す。したがってグローバル変数と呼ばれていても、importしたモジュールの場合、export指定されていない限りはその変数に
アクセスすることは出来ない。(紛らわしいので、グローバル関数とは呼ばず、モジュールフィールドなどと呼ぶ)
11.new演算子の使用は、C++同様ヒープ領域へのメモリ確保を意味することにする。この仕様は破棄。new演算子は廃止とする。
Expressoでは、リテラルでvectorやdictionary、tupleの生成ができるが、これらもnew演算子を使用することでヒープ確保にすることができる。
なお、ここでヒープに確保されるのは、データ本体のメタデータを管理するヘッダーオブジェクトのことであり、データ自体を格納するノードオブジェクトは
new演算子の使用にかかわらずヒープ領域に確保される。
12.nullリテラルは用意するものの、その使用は、.NETを相互運用する際のみに限る。
 
Expresso組み込みの型に関して
int           : いわゆる整数型。.NETのint型を使用。
uint          : いわゆる非負整数型。.NETのuint型を使用。
(long)        : 64ビットOSが標準になっているため、32ビット整数よりも高速になると考えられるので、導入するか迷っている。
(ulong)       : longの非負整数版。こちらも導入するか迷っている。
bool          : いわゆる論理値型。.NETのboolean型を使用。
float         : いわゆる浮動小数点型。32ビット精度。.NETではfloatを使用。
double        : いわゆる倍精度浮動小数点型。64ビット精度版のfloat。.NETではdoubleを使用。
bigint        : いわゆる多倍長整数型。.NETでは、BigIntegerクラスを使用。
char          : 文字型。.NET上のchar型を使用するため、エンコーディングはUTF-16。UTF-16の関係上、サイズは16ビットのはず。
string        : いわゆる文字列型。.NETのstring型を使用。.NET以外で実装する場合、文字列の比較をオブジェクトの参照の比較で行うように実装すること。こちらもエンコーディングは、UTF-16。
byte          : Cで言うところのchar型。要するにバイト型。.NETでは、byte型を使用。
tuple         : Pythonなどで実装されているタプル型と同じ。長さ不変、書き換え不可な配列とも言える。リストや配列と違い、要素の型が混合していてもいいのが最大の特徴。Tupleクラスを使用。
vector        : データ構造でよく話題に上る可変長配列。長さ可変、書き換え可能な配列。.NETでは、Listクラスで実装。
dictionary    : いわゆる辞書型。言語によっては、連想配列とも呼ばれるもの。.NETでは、Dictionaryクラスで実装。
array         : いわゆる配列。長さ不変、書き換え可能。コンパイル時に長さがわかる。
function      : 関数型は別定義。クロージャは実装上、暗黙のクラスを生成する。
intseq        : PythonのxrangeオブジェクトやRubyのRangeオブジェクトと似たようなもの。整数の数列を作り出すジェネレーターと思えばいい。
slice         : intseqをコレクションに与えた時の戻り値。コレクションの一部を参照するenumeratorになる。

