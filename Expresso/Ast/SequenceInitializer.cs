using System;
using System.Collections.Generic;
using System.Linq;

using Expresso.Builtins;
using Expresso.Interpreter;
using Expresso.Compiler;
using Expresso.Compiler.Meta;
using Expresso.Runtime.Operations;

namespace Expresso.Ast
{
	using CSharpExpr = System.Linq.Expressions.Expression;

	/// <summary>
	/// シーケンス(リストや連想配列など)のリテラル式。
	/// Represents the literal form of a sequence initialization.
	/// </summary>
	public class SequenceInitializer : Expression
	{
		readonly Expression[] items;
		readonly ObjectTypes type;

		/// <summary>
        /// シーケンス生成に使用する式群。
		/// Expressions generating each element of a sequence object.
        /// </summary>
        public Expression[] Items{
			get{return items;}
		}
		
		/// <summary>
		/// この式群を評価した結果生成されるオブジェクトのタイプ。
		/// The type of sequence object generated by this node.
		/// </summary>
		public ObjectTypes ObjType{
			get{return type;}
		}

        public override NodeType Type{
            get{return NodeType.Initializer;}
        }

		public SequenceInitializer(Expression[] seqItems, ObjectTypes objType)
		{
			items = seqItems;
			type = objType;
		}

        public override bool Equals(object obj)
        {
            var x = obj as SequenceInitializer;

            if(x == null)
                return false;
			
			return items.Equals(x.items);
        }

        public override int GetHashCode()
        {
            return this.items.GetHashCode();
        }

        /*internal override object Run(VariableStore varStore)
        {
            object result = null;
			switch (ObjType) {
			case ObjectTypes.TUPLE:
			{
				var tmp_list = new List<object>(Initializer.Count);
				foreach (var item in Initializer)
					tmp_list.Add(item.Run(varStore));

				result = ExpressoOps.MakeTuple(tmp_list);
				break;
			}
				
			case ObjectTypes.LIST:
			{
				var tmp_list = new List<object>(Initializer.Count);
				foreach (var item in Initializer)
					tmp_list.Add(item.Run(varStore));

				result = ExpressoOps.MakeList(tmp_list);
				break;
			}
				
			case ObjectTypes.DICT:
			{
				var len = Initializer.Count;
				var dict_len = len / 2;
				var key_list = new List<object>(dict_len);
				var value_list = new List<object>(dict_len);
				var i = 0;
				foreach(var obj in Initializer){
					if(i % 2 == 0)
						key_list.Add(obj.Run(varStore));
					else
						value_list.Add(obj.Run(varStore));

					++i;
				}
				result = ExpressoOps.MakeDict(key_list, value_list);
				break;
			}
				
			default:
				throw ExpressoOps.RuntimeError("Unknown type of initializer");
			}
			
			return result;
        }*/

		internal override CSharpExpr Compile(Emitter<CSharpExpr> emitter)
		{
			return emitter.Emit(this);
		}

		internal override void Walk(ExpressoWalker walker)
		{
			if(walker.Walk(this)){
				foreach(var item in items)
					item.Walk(walker);
			}
			walker.PostWalk(this);
		}
	}
}

