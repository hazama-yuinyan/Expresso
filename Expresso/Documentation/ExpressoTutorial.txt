Expresso primarily aims to be an alternative PHP, or more precisely another Java.
Even though it's a type-strict language, it looks rather in type-free way.
First of all, we starts from the traditional "hello world" program.
You may expect it to be a one-liner program, but unfortunately it's two liners like the following:
```expresso
module main;
def main(){
    println("Hello, world!");
}
```
Every Expresso program consists of at least one module and every module must be explicitly named.

The main policy for Expresso is that "Programming languages must allow programmers to write what it does, not how it does something". In traditional C, we often end up writing something like the following:
```c
// construct some array
for(int i = 0; i < sizeof(array); ++i){
    // do somegthing on each element
}
```
Even though for loops have long long history, I think that it doesn't express one's intension especially when you want to process an array. Instead, I recommend you to use functional style. 

** Main philosophies 
Expresso has two philosophies. One is "What the compiler doesn't allow you to do is just what you can't", and the other is
"Just do as the compiler says". The first one is somewhat obvious because otherwise, the compiler has some bugs.
The latter tells you that if you just follow what the compiler says, then you can do right things naturally.
** Let bindings and variable declarations
Let bindings introduce tags, and tags are names which you use in order to refer to values later on.
By contrast, variable declarations introduce boxes that have certain shapes, and those boxes can be
filled with anything at any time as long as the shapes match.