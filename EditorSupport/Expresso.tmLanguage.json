{
    "fileTypes" : ["exs"],
    "foldingStartMarker" : "^\\s*/\\*|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))",
    "foldingStopMarker" : "^\\s*\\*/|^\\s*\\}",
    "keyEquivalent" : "^~EXS",
    "name" : "Expresso",
    "patterns" : [
        {
            "patterns" : [
                {
                    "captures" : {
                        "1" : {
                            "name" : "punctuation.definition.multi.comment.exs"
                        }
                    },
                    "begin" : "(/\\*)",
                    "end" : "\\*/",
                    "name" : "comment.block.exs"
                },
                {
                    "captures" : {
                        "1" : {
                            "name" : "punctuation.definition.single.comment.exs"
                        }
                    },
                    "match" : "(//).*\\n?$",
                    "name" : "comment.line.exs"
                }
            ]
        },
        {
            "begin" : "(?x)^\\s*((?:\\b(export)\\b\\s)*)(class)\\s+([A-Za-z_]\\w+)\\b",
            "captures" : {
                "1" : {
                    "name" : "storage.modifier.exs"
                },
                "2" : {
                    "name" : "storage.type.exs"
                },
                "3" : {
                    "name" : "entity.name.type.class.exs"
                }
            },
            "end" : "{",
            "name" : "meta.definition.class.exs",
            "patterns" : [
                {
                    "include" : "#classInheritance"
                }
            ]
        },
        {
            "match" : "\\b(true|false|self|super)\\b",
            "name" : "constant.language.source.exs"
        },
        {
            "match" : "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l)?\\b",
            "name" : "constant.numeric.source.exs"
        },
        {
            "match" : "\\b(if|else|for|while|return|continue|break|match|yield)\\b",
            "name" : "keyword.control.source.exs"
        },
        {
            "match" : "\\b(new|typeof|sizeof|override|in|readonly|params|as)\\b",
            "name" : "keyword.operator.source.exs"
        },
        {
            "match" : "\\b(def|explicit|implicit|in)\\b",
            "name" : "keyword.other.source.exs"
        },
        {
            "match" : "\\b(internal|public|protected|private|static|const|new|abstract|override|export|readonly)\\b",
            "name" : "storage.modifier.source.exs"
        },
        {
            "begin" : "(r[#]*)(\")",
            "beginCaptures" : {
                "1" : {
                    "name" : "punctuation.definition.string.prefix.literal.exs",
                },
                "2" : {
                    "name" : "punctuation.definition.string.open.double-quote.exs"
                }
            },
            "end" : "(\")(#)*",
            "endCaptures" : {
                "0" : {
                    "name" : "punctuation.definition.string.end.exs"
                },
                "1" : {
                    "name" : "punctuation.definition.string.close.double-quote.exs"
                },
                "2" : {
                    "name" : "punctuation.definition.string.postfix.literal.exs"
                }
            },
            "name" : "string.quoted.string.literal.exs",
            "patterns" : [
                {
                    "match" : "\"",
                    "name" : "constant.character.double-quote.exs"
                },
                {
                    "match" : ".",
                    "name" : "constant.character.exs"
                }
            ]
        },
        {
            "begin" : "\"",
            "beginCaptures" : {
                "0" : {
                    "name" : "punctuation.definition.string.begin.exs"
                }
            },
            "end" : "\"",
            "endCaptures" : {
                "0" : {
                    "name" : "punctuation.definition.string.end.exs"
                }
            },
            "name" : "string.quoted.double.exs",
            "patterns" : [
                {
                    "match" : "\\[atrnv]",
                    "name" : "constant.character.escape.exs"
                },
                {
                    "match" : ".",
                    "name" : "constant.character.exs"
                }
            ]
        },
        {
            "begin" : "'",
            "beginCaptures" : {
                "0" : {
                    "name" : "punctuation.definition.string.begin.exs"
                }
            },
            "end" : "'",
            "endCaptures" : {
                "0" : {
                    "name" : "punctuation.definition.string.end.exs"
                }
            },
            "name" : "string.quoted.single.exs",
            "patterns" : [
                {
                    "match" : "\\[atrnv]",
                    "name" : "constant.character.escape.exs"
                },
                {
                    "match" : ".",
                    "name" : "constant.character.exs"
                }
            ]
        },
        {
            "captures" : {
                "1" : {
                    "name" : "keyword.other.import.exs"
                },
                "2" : {
                    "name" : "entity.name.type.package.exs"
                },
                "3" : {
                    "name" : "keyword.other.as.exs"
                },
                "4" : {
                    "name" : "entity.name.type.package.alias.exs"
                }
            },
            "match" : "^\\s*(import)\\s+([^ ;]*)(?:\\s+(as)\\s+([^ ;]*))?;",
            "name" : "meta.keyword.import.exs",
            "comment" : "Match on import statements"
        },
        {
            "captures" : {
                "1" : {
                    "name" : "keyword.other.module.exs"
                },
                "2" : {
                    "name" : "entity.name.type.package.exs"
                }
            },
            "match" : "^\\s*(module)\\s+([^ ;]*);",
            "name" : "meta.keyword.module.exs",
            "comment" : "Match on module definition statements"
        },
        {
            "captures" : {
                "1" : {
                    "name" : "keyword.storage.export.exs"
                },
                "2" : {
                    "name" : "keyword.other.kind.variable.exs"
                },
                "3" : {
                    "name" : "entity.name.variable.other.exs"
                },
                "4" : {
                    "name" : "operator.variable.definition.exs"
                },
                "5" : {
                    "name" : "entity.name.type.exs"
                }
            },
            "match" : "^\\s*(export)?\\s*(let|var)\\s+(?:([^ ;]+)(?:\\s+(\\(-)\\s+([^ ;]+))?\\s*(?:,\\s*)?)+;$",
            "name" : "meta.keyword.variable.exs",
            "comment" : "Match on variable definition statements"
        },
        {
            "patterns" : [
                {
                    "match" : "\\b(bool|byte|float|double|int|bigint|vector|dictionary|tuple|intseq|char|string|array|slice|function|void|class|interface)\\b",
                    "name" : "storage.type.exs"
                }
            ]
        },
        {
            "repository" : {
                "classInheritance" : {
                    "patterns" : [
                        {
                            "begin" : ":",
                            "end" : "(?={)",
                            "patterns" : [
                                {
                                    "captures" : {
                                        "1" : {
                                            "name" : "storage.type.source.exs"
                                        }
                                    },
                                    "match" : "\\s*,?([A-Za-z_]\\w*)\\b"
                                }
                            ]
                        }
                    ]
                },
                "statementRemainder" : {
                    "begin" : "\\(",
                    "end" : "(?=\\))",
                    "name" : "meta.definition.param-list.source.exs",
                    "patterns" : [
                        {
                            "include" : "#builtinTypes"
                        }
                    ]
                }
            }
        }
    ],
    "scopeName" : "source.exs",
    "uuid" : "F0FD0FAA-A6A3-11E3-A1BD-A73DC654913E"
}
