{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Expresso",
    "foldingStartMarker": "^\\s*/\\*|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))",
    "foldingStopMarker": "^\\s*\\*/|^\\s*\\}",
    "fileTypes": [
        "exs"
    ],
    "uuid": "F0FD0FAA-A6A3-11E3-A1BD-A73DC654913E",
	"patterns": [
        {
            "begin": "/\\*",
            "captures": {
                "0" : {
                    "name" : "punctuation.definition.comment.multi.expresso"
                }
            },
            "end": "\\*/",
            "name" : "comment.block.expresso"
        },
        {
            "begin": "//",
            "captures": {
                "0" : {
                    "name" : "punctuation.definition.comment.line.expresso"
                }
            },
            "end": "\\n$",
            "name" : "comment.line.double-slash.expresso"
        },
        {
            "begin": "^(import)\\s+([\\w0-9_]+)(?:::{?(?:,?([\\w0-9_]+))+}?)?",
            "beginCaptures": {
                "1" : {
                    "name" : "keyword.other.import.expresso"
                },
                "2" : {
                    "name" : "entity.name.type.expresso"
                },
                "3" : {
                    "name" : "entity.name.type.expresso"
                }
            },
            "end" : "}?;$",
            "patterns": [
                {
                    "begin" : "\\.{?",
                    "end" : "}?\\s+(?=from|as)",
                    "patterns": [
                        {
                            "match": "([\\w0-9_]+),?",
                            "captures": {
                                "1" : {
                                    "name" : "entity.name.type.expresso"
                                }
                            }
                        }
                    ]
                },
                {
                    "match": "(from) (\"[^\"]+\")\\s+(?=as)",
                    "captures": {
                        "1" : {
                            "name" : "keyword.other.from.expresso"
                        },
                        "2" : {
                            "name" : "string.quoted.double.expresso"
                        }
                    }
                },
                {
                    "begin": "(as) {?",
                    "beginCaptures": {
                        "1" : {
                            "name" : "keyword.other.as.expresso"
                        }
                    },
                    "end": "(?=}?;$)",
                    "patterns": [
                        {
                            "match": "([\\w0-9_]+),?",
                            "captures": {
                                "1" : {
                                    "name" : "entity.name.type.expresso"
                                }
                            }
                        }
                    ]
                }
            ],
            "name" : "meta.statement.import.expresso"
        },
        {
            "match" : "^(module)\\s+(.+?);$",
            "captures" : {
                "1" : {
                    "name" : "keyword.other.module.expresso"
                },
                "2" : {
                    "name" : "entity.name.type.package.expresso"
                }
            },
            "name" : "meta.defitinion.module.expresso",
            "comment" : "Match on module definition statements"
        },
        {
            "begin": "^\\s*(throw)\\s+(.+?)({)",
            "beginCaptures": {
                "1" : {
                    "name" : "keyword.control.throw.expresso"
                },
                "2" : {
                    "name" : "entity.name.type.expresso"
                },
                "3" : {
                    "name" : "punctuation.definition.lcurlybrace.expresso"
                }
            },
            "end": "(});",
            "endCaptures": {
                "1" : {
                    "name" : "punctuation.definition.rcurlybrace.expresso"
                }
            },
            "patterns": [
                {
                    "match": "([\\w_0-9]+)(:)",
                    "captures": {
                        "1" : {
                            "name" : "variable.parameter.expresso"
                        },
                        "2" : {
                            "name" : "punctuation.definition.colon.expresso"
                        }
                    }
                },
                {
                    "include": "#stringLiterals"
                },
                {
                    "include" : "#numberLiterals",
                    "name" : "constant.numeric.expresso"
                },
                {
                    "include" : "#simpleFunctionCall",
                    "name" : "meta.function.call.expresso"
                }
            ],
            "name" : "meta.statement.throw.expresso"
        },
        {
            "begin": "(let|var)\\s+",
            "beginCaptures": {
                "1" : {
                    "name" : "keyword.other.let-var.expresso"
                }
            },
            "end": "(;)$",
            "endCaptures": {
                "1" : {
                    "name" : "punctuation.definition.semicolon.expresso"
                }
            },
            "patterns": [
                {
                    "match": "(,?)\\s*([\\w0-9_]+)\\s+\\(-\\s+([\\w_0-9\\.]+)\\s*(=?)\\s*",
                    "captures": {
                        "1" : {
                            "name" : "punctuation.defitnion.comma.expresso"
                        },
                        "2" : {
                            "name" : "variable.name.expresso"
                        },
                        "3" : {
                            "patterns": [
                                {
                                    "include": "#builtinTypes"
                                },
                                {
                                    "include": "#typesInModule"
                                },
                                {
                                    "include": "#typesInTypes"
                                }
                            ]
                        },
                        "4" : {
                            "name" : "punctuation.defitnion.equal.expresso"
                        }
                    }
                },
                {
                    "match": "(,?)\\s*([\\w0-9_]+)\\s+(=)\\s+",
                    "captures": {
                        "1" : {
                            "name" : "punctuation.defitnion.comma.expresso"
                        },
                        "2" : {
                            "name" : "variable.name.expresso"
                        },
                        "3" : {
                            "name" : "punctuation.defitnion.equal.expresso"
                        }
                    }
                },
                {
                    "include": "#numberLiterals",
                    "name" : "constant.numeric.expresso"
                },
                {
                    "include": "#stringLiterals"
                },
                {
                    "include": "#keywordVariables",
                    "name" : "variable.language.expresso"
                },
                {
                    "include": "#simpleFunctionCall",
                    "name" : "meta.function.call.expresso"
                },
                {
                    "include": "#castExpression",
                    "name" : "meta.expression.cast.expresso"
                },
                {
                    "include": "#languageConstants"
                }
            ],
            "name" : "meta.statement.variable-declaration.expresso"
        },
        {
            "begin": "^\\s*(export)?\\s*(class)\\s+([\\w0-9_]+)\\s*(?:(:)\\s+)?",
            "beginCaptures": {
                "1" : {
                    "name" : "keyword.other.export.expresso"
                },
                "2" : {
                    "name" : "keyword.other.class.expresso"
                },
                "3" : {
                    "name" : "entity.name.class.expresso"
                },
                "4" : {
                    "name" : "punctuation.definition.colon.expresso"
                }
            },
            "end": "\\n?\\s*({)",
            "endCaptures": {
                "1" : {
                    "name" : "punctuation.defitinion.curly-brackets.expresso"
                }
            },
            "patterns": [
                {
                    "match": "(,?)\\s*([\\w0-9_]+)",
                    "captures": {
                        "1" : {
                            "name" : "punctuation.definition.comma.expresso"
                        },
                        "2" : {
                            "name" : "entity.name.class.expresso"
                        }
                    }
                }
            ],
            "name" : "meta.class.expresso"
        },
        {
            "begin": "(#\\[)",
            "beginCaptures": {
                "1": {
                    "name" : "punctuation.definition.sharp-lbracket.expresso"
                }
            },
            "end": "(])",
            "endCaptures": {
                "1": {
                    "name" : "punctuation.definition.rbracket.expresso"
                }
            },
            "patterns": [
                {
                    "begin": "([\\w_0-9]+)({)",
                    "beginCaptures": {
                        "1": {
                            "name" : "entity.name.class.expresso"
                        },
                        "2" : {
                            "name" : "punctuation.definition.lcurlybrace.expresso"
                        }
                    },
                    "end": "(})",
                    "endCaptures": {
                        "1" : {
                            "name" : "punctuation.definition.rcurlybrace.expresso"
                        }
                    },
                    "patterns": [
                        {
                            "match": "([\\w_0-9]+)(:)",
                            "captures": {
                                "1" : {
                                    "name" : "variable.other.expresso"
                                },
                                "2" : {
                                    "name" : "punctuation.definition.colon.expresso"
                                }
                            }
                        },
                        {
                            "include": "#stringLiterals"
                        },
                        {
                            "include": "#numberLiterals",
                            "name": "constant.numeric.expresso"
                        }
                    ]
                },
                {
                    "match": "[\\w_0-9]+",
                    "name" : "entity.name.class.expresso"
                }
            ],
            "name" : "meta.definition.attribute.expresso",
            "comment": "Use of attributes"
        },
        {
            "begin": "^\\s*(export)?\\s*(enum)\\s+([\\w_0-9]+)\\s*({)?$",
            "beginCaptures": {
                "1" : {
                    "name" : "keyword.other.export.expresso"
                },
                "2" : {
                    "name" : "keyword.other.enum.expresso"
                },
                "3" : {
                    "name" : "entity.name.class.expresso"
                },
                "4" : {
                    "name" : "punctuation.definition.l-curlybrace.expresso"
                }
            },
            "end" : "\\n?\\s*(})",
            "endCaptures": {
                "1" : {
                    "name" : "punctuation.definition.r-curlybrace.expresso"
                }
            },
            "patterns": [
                {
                    "begin": "([\\w_0-9]+)(\\()",
                    "beginCaptures": {
                        "1" : {
                            "name" : "entity.name.variant.expresso"
                        },
                        "2" : {
                            "name" : "punctuation.defitinion.l-parenthesis.expresso"
                        }
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1" : {
                            "name" : "punctuation.defitinion.r-parenthesis.expresso"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#builtinTypes"
                        },
                        {
                            "include": "#typesInModule"
                        },
                        {
                            "include": "#typesInTypes"
                        }
                    ]
                },
                {
                    "include": "#forStatement"
                },
                {
                    "include": "#ifStatement"
                },
                {
                    "include": "#matchStatement"
                },
                {
                    "include": "#functionDefinition"
                },
                {
                    "include": "#simpleVariableName"
                },
                {
                    "include": "#simpleFunctionCall"
                },
                {
                    "include": "#castExpression"
                },
                {
                    "include": "#keywordVariables"
                },
                {
                    "include": "#numberLiterals"
                },
                {
                    "include": "#stringLiterals"
                }
            ]
        },
        {
            "include": "#forStatement"
        },
        {
            "include": "#ifStatement"
        },
        {
            "include": "#matchStatement"
        },
        {
            "include": "#stringLiterals"
        },
        {
            "include": "#numberLiterals"
        },
        {
            "include": "#simpleFunctionCall",
            "name": "meta.function.call.expresso"
        },
        {
            "include": "#functionDefinition"
        },
        {
            "include": "#castExpression",
            "name" : "meta.expression.cast.expresso"
        },
        {
            "include": "#languageConstants"
        },
        {
            "match" : "\\b(if|else|for|while|return|continue|break|match|yield)\\b",
            "name" : "keyword.control.expresso"
        },
        {
            "match" : "\\b(override|as)\\b",
            "name" : "keyword.operator.expresso"
        },
        {
            "include": "#keywordVariables",
            "name" : "variable.language.expresso"
        },
        {
            "match" : "\\b(import|module|def|in|from|let|var)\\b",
            "name" : "keyword.other.expresso"
        },
        {
            "match" : "\\b(internal|public|protected|private|static|abstract|override|export|readonly)\\b",
            "name" : "storage.modifier.expresso"
        }
    ],
    "repository" : {
        "classInheritance" : {
            "patterns" : [
                {
                    "begin" : ":",
                    "end" : "(?={)",
                    "patterns" : [
                        {
                            "match" : "\\s*,?([A-Za-z_]\\w*)\\b",
                            "captures" : {
                                "1" : {
                                    "name" : "storage.type.expresso"
                                }
                            }
                        }
                    ]
                }
            ]
        },
        "statementRemainder" : {
            "patterns" : [
                {
                    "begin" : "\\(",
                    "end" : "(?=\\))",
                    "name" : "meta.definition.param-list.expresso",
                    "patterns" : [
                        {
                            "include" : "#builtinTypes"
                        }
                    ]
                }
            ]
        },
        "stringLiterals" : {
            "patterns": [
                {
                    "begin": "\"",
                    "end": "\"",
                    "patterns" : [
                        {
                            "match": "\\[artnv]",
                            "name" : "constant.character.escape.expresso"
                        },
                        {
                            "begin": "(\\$\\{)",
                            "beginCaptures": {
                                "1" : {
                                    "name" : "punctuation.definition.template-expression.begin.expresso"
                                }
                            },
                            "end": "(})",
                            "endCaptures": {
                                "1" : {
                                    "name" : "punctuation.definition.template-expression.end.expresso"
                                }
                            },
                            "patterns": [
                                {
                                    "include" : "#stringLiterals"
                                },
                                {
                                    "include": "#numberLiterals",
                                    "name" : "constant.numeric.expresso"
                                },
                                {
                                    "include": "#simpleFunctionCall",
                                    "name" : "meta.function.call.expresso"
                                },
                                {
                                    "include" : "#simpleVariableName",
                                    "name" : "variable.name.expresso"
                                },
                                {
                                    "include": "#castExpression",
                                    "name" : "meta.expression.cast.expresso"
                                },
                                {
                                    "include": "#languageConstants"
                                }
                            ],
                            "name" : "meta.template.expression.expresso"
                        },
                        {
                            "match": "\\$\\$",
                            "name" : "constant.character.expresso"
                        }
                    ],
                    "name" : "string.quoted.double.expresso"
                },
                {
                    "begin" : "(r[#]*)(\")",
                    "beginCaptures" : {
                        "1" : {
                            "name" : "punctuation.definition.string.prefix.literal.expresso"
                        },
                        "2" : {
                            "name" : "punctuation.definition.string.open.double-quote.expresso"
                        }
                    },
                    "end" : "(\")([#]*)",
                    "endCaptures" : {
                        "0" : {
                            "name" : "punctuation.definition.string.end.expresso"
                        },
                        "1" : {
                            "name" : "punctuation.definition.string.close.double-quote.expresso"
                        },
                        "2" : {
                            "name" : "punctuation.definition.string.postfix.literal.expresso"
                        }
                    },
                    "name" : "string.quoted.double.raw.expresso",
                    "patterns" : [
                        {
                            "match" : "\"",
                            "name" : "constant.character.double-quote.expresso"
                        },
                        {
                            "begin": "(\\${)",
                            "beginCaptures": {
                                "1" : {
                                    "name" : "punctuation.definition.template-expression.begin.expresso"
                                }
                            },
                            "end": "(})",
                            "endCaptures": {
                                "1" : {
                                    "name" : "punctuation.definition.template-expression.end.expresso"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#stringLiterals"
                                },
                                {
                                    "include": "#numberLiterals",
                                    "name" : "constant.numeric.expresso"
                                },
                                {
                                    "include": "#simpleFunctionCall",
                                    "name" : "meta.function.call.expresso"
                                },
                                {
                                    "include": "#simpleVariableName",
                                    "name" : "variable.name.expresso"
                                },
                                {
                                    "include": "#castExpression",
                                    "name" : "meta.expression.cast.expresso"
                                },
                                {
                                    "include": "#languageConstants"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin" : "'",
                    "end" : "'",
                    "name" : "string.quoted.single.expresso",
                    "patterns" : [
                        {
                            "match" : "\\[atrnv]",
                            "name" : "constant.character.escape.expresso"
                        }
                    ]
                }
            ]
        },
        "numberLitrals" : {
           "patterns" : [
                {
                    "match" : "\\b(?:(?:0(?:x|X)[0-9a-fA-F]+)|[0-9]+)(?:u|U|l|L)?\\b",
                    "name" : "constant.numeric.expresso"
                },
                {
                    "match": "\\b(?:(?:[0-9]+\\.[0-9]*)|(?:\\.[0-9]+))(?:(?:e|E)(?:\\+|-)?[0-9]+)?(?:f|F)?\\b",
                    "name" : "constant.numeric.expresso"
                }
            ]
        },
        "keywordVariables" : {
            "patterns": [{
                "match": "\\b(self|super)\\b",
                "name" : "variable.language.expresso"
            }]
        },
        "simpleFunctionCall" : {
            "patterns": [
                {
                    "begin": "([\\w0-9_]+)(\\()\\s*",
                    "beginCaptures": {
                        "1" : {
                            "name" : "entity.name.function.expresso"
                        },
                        "2" : {
                            "name" : "punctuation.definition.open-parenthesis.expresso"
                        }
                    },
                    "end": "\\s*(\\))",
                    "endCaptures": {
                        "1" : {
                            "name" : "punctuation.definition.close-parenthesis.expresso"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#stringLiterals"
                        },
                        {
                            "include": "#numberLiterals",
                            "name" : "constant.numeric.expresso"
                        },
                        {
                            "include": "#keywordVariables",
                            "name" : "variable.language.expresso"
                        },
                        {
                            "include": "#simpleFunctionCall",
                            "name" : "meta.function.call.expresso"
                        },
                        {
                            "include": "#languageConstants"
                        }
                    ]
                }
            ]
        },
        "builtinTypes": {
            "patterns": [
                {
                    "match" : "\\b(bool|byte|float|double|int|uint|bigint|vector|dictionary|tuple|intseq|char|string|array|slice|function|void|class|interface|enum)\\b",
                    "name" : "keyword.other.expresso"
                }
            ]
        },
        "simpleVariableName": {
            "patterns": [
                {
                    "match": "[\\w_0-9]+(?!\\(\\))",
                    "name" : "variable.name.expresso"
                }
            ]
        },
        "typesInModule": {
            "patterns": [
                {
                    "match": "([\\w_0-9]+)(::)([\\w_0-9]+)(?:(.)([\\w_0-9]+))*",
                    "captures": {
                        "1" : {
                            "name" : "entity.name.module.expresso"
                        },
                        "2" : {
                            "name" : "punctuation.definition.double-colon.expresso"
                        },
                        "3" : {
                            "name" : "entity.name.class.expresso"
                        },
                        "4" : {
                            "name" : "punctuation.definition.dot.expresso"
                        },
                        "5" : {
                            "name" : "entity.name.class.expresso"
                        }
                    }
                }
            ]
        },
        "typesInTypes": {
            "patterns": [
                {
                    "match": "([\\w_0-9]+)(?:(.)([\\w_0-9]+))*",
                    "captures": {
                        "1" : {
                            "name" : "entity.name.class.expresso"
                        },
                        "2" : {
                            "name" : "punctuation.definition.dot.expresso"
                        },
                        "3" : {
                            "name" : "entity.name.class.expresso"
                        }
                    }
                }
            ]
        },
        "castExpression": {
            "patterns": [
                {
                    "match": "([^\\s]+)\\s+(as)\\s+([\\w_0-9\\.]+)",
                    "captures": {
                        "1" : {
                            "patterns": [
                                {
                                    "include": "#simpleVariableName"
                                },
                                {
                                    "include": "#simpleFunctionCall"
                                }
                            ]
                        },
                        "2" : {
                            "name" : "keyword.operator.as.expresso"
                        },
                        "3" : {
                            "patterns": [
                                {
                                    "include": "#builtinTypes"
                                },
                                {
                                    "include": "#typesInModule"
                                },
                                {
                                    "include": "#typesInTypes"
                                }
                            ]
                        }
                    },
                    "name" : "meta.expression.as-expression.expresso"
                }
            ]
        },
        "languageConstants" : {
            "patterns": [
                {
                    "match" : "\\b(true|false|null)\\b",
                    "name" : "constant.language.expresso"
                }
            ]
        },
        "forStatement" : {
            "patterns": [
                {
                    "begin": "(for)\\s+(let|var)?\\s*",
                    "beginCaptures": {
                        "1" : {
                            "name" : "keyword.control.for.expresso"
                        },
                        "2" : {
                            "name" : "keyword.other.let-var.expresso"
                        }
                    },
                    "end" : "(in)",
                    "endCaptures": {
                        "1" : {
                            "name" : "keyword.control.in.expresso"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#simpleVariableName"
                        }
                    ],
                    "name" : "meta.definition.statement.for.expresso"
                }
            ]
        },
        "ifStatement" : {
            "patterns" : [
                {
                    "begin": "(if)\\s+",
                    "beginCaptures": {
                        "1" : {
                            "name" : "keyword.control.if.expresso"
                        }
                    },
                    "end": "\\s*({)",
                    "endCaptures": {
                        "1" : {
                            "name" : "punctuation.definition.l-curlybrace.expresso"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#keywordVariables"
                        },
                        {
                            "include": "#simpleVariableName"
                        },
                        {
                            "include": "#languageConstants"
                        },
                        {
                            "include": "#simpleFunctionCall"
                        },
                        {
                            "include": "#numberLiterals"
                        },
                        {
                            "include": "#stringLiterals"
                        }
                    ],
                    "name" : "meta.defitinion.statement.if.expresso"
                }
            ]
        },
        "matchStatement" : {
            "patterns" : [
                {
                    "begin": "(match)\\s+",
                    "beginCaptures": {
                        "1" : {
                            "name" : "keyword.control.match.expresso"
                        }
                    },
                    "end": "\\s*({)",
                    "endCaptures": {
                        "1" : {
                            "name" : "punctuation.definition.l-curlybrace.expresso"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#keywordVariables"
                        },
                        {
                            "include": "#simpleVariableName"
                        },
                        {
                            "include": "#languageConstants"
                        },
                        {
                            "include": "#simpleFunctionCall"
                        },
                        {
                            "include": "#numberLiterals"
                        },
                        {
                            "include": "#stringLiterals"
                        }
                    ],
                    "name" : "meta.definition.statement.match.expresso"
                }
            ]
        },
        "functionDefinition" : {
            "patterns": [
                {
                    "begin": "\\s*(public|private|protected|export)?\\s*(def)\\s+([\\w_0-9]+)\\s*(\\()",
                    "beginCaptures": {
                        "1" : {
                            "name" : "keyword.other.access.expresso"
                        },
                        "2" : {
                            "name" : "keyword.other.def.expresso"
                        },
                        "3" : {
                            "name" : "entity.name.function.expresso"
                        },
                        "4" : {
                            "name" : "punctuation.definition.l-parenthesis.expresso"
                        }
                    },
                    "end": "(\\))\\s*(?:->\\s+(.+?)\\s*)?({?)$",
                    "endCaptures": {
                        "1" : {
                            "name" : "punctuation.definition.r-parenthesis.expresso"
                        },
                        "2" : {
                            "patterns": [
                                {
                                    "include": "#builtinTypes"
                                },
                                {
                                    "include": "#typesInModule"
                                },
                                {
                                    "include": "#typesInTypes"
                                }
                            ]
                        },
                        "3" : {
                            "name" : "punctuation.definition.l-curlybrace.expresso"
                        }
                    },
                    "patterns": [
                        {
                            "match": ",?\\s*([\\w_0-9]+)\\s*(\\(-)\\s+([^\\),\\s]+)",
                            "captures": {
                                "1" : {
                                    "name" : "variable.parameter.expresso"
                                },
                                "2" : {
                                    "name" : "punctuation.definition.includes.expresso"
                                },
                                "3" : {
                                    "patterns": [
                                        {
                                            "include": "#builtinTypes"
                                        },
                                        {
                                            "include": "#typesInModule"
                                        },
                                        {
                                            "include": "#typesInTypes"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "match": ",?\\s*([\\w_0-9]+)\\s+(=)\\s+([^\\),\\s]+)",
                            "captures": {
                                "1" : {
                                    "name" : "variable.parameter.expresso"
                                },
                                "2" : {
                                    "name" : "punctuation.definition.equal.expresso"
                                },
                                "3" : {
                                    "patterns": [
                                        {
                                            "include": "#stringLiterals"
                                        },
                                        {
                                            "include": "#numberLiterals"
                                        },
                                        {
                                            "include": "#languageConstants"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "name" : "meta.definition.function.expresso"
                }
            ]
        }
    },
	"scopeName": "source.expresso"
}